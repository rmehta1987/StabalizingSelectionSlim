// script for Stabalizing Selection using underdominance


initialize() {
	//setSeed(100);
	defineConstant("N", 500); // population size        
	defineConstant("outfile", "test"); // output filename
	
	defineConstant("L", 5e8);      // total chromosome length
	defineConstant("mu", 1e-7); // mutation rate
	defineConstant("dominance_coef", 1.9e5); // dominance coefficient so that heterozygote is selected against
	// defineConstant("stable_selection", -1*((1/(4*N))*1e-2));  // selection coefficient for under-dominance
	defineConstant("recomb_rate", 1e-8);  // recombination rate
    defineConstant("stable_selection", -1.75e-6);
	
	initializeMutationRate(mu);
	initializeRecombinationRate(1e-7);
	
	initializeMutationType("m1", 0.5, "f", 0.0);  // neutral, s = 0
	initializeMutationType("m2", dominance_coef, "f", stable_selection);  // single selection coefficient
	m2.color="red";
	initializeGenomicElementType("g1", c(m1,m2), c(0.3,0.7)); // 1.0:
	//initializeGenomicElementType("g1", m2, 1.0); 
	initializeGenomicElement(g1, 0, L);
}

/// **Demography:**

// Create the ancestral population
1 {
	sim.addSubpop("p1", N);
}
4000 { p1.setSubpopulationSize(500); }
5500 { p1.setSubpopulationSize(500); }

/* 1 late() {
	
	// create a log file 
  log = sim.createLogFile("/mnt/sda/home/ludeep/Desktop/PopGen/EvolutionaryGWAS/Slim_simulations/StabalizingSelectionSlim/sim_log.txt", sep="\t", logInterval=10); 
  log.addGeneration(); 
  log.addPopulationSize(); 
  //log.addCustomColumn("Mean_Fitness", "mean(p1.cachedFitness(NULL));");
  log.addCustomColumn("SFS_0 ", "mutTypeFrequency2(p1,m2);"); 
  log.addCustomColumn("SFS_1 ", "mutTypeFrequency(p1,m2);");  

} */

6000 late() {
	
	m2muts = sim.mutationsOfType(m2);
	freqs = sim.mutationFrequencies(p1, m2muts);
	
	lines = m2muts.id + "\t" + m2muts.position + "\t" + m2muts.selectionCoeff + "\t" + freqs + "\n";
	file = paste(lines, sep="");
	file = "tag" + "\t" + "position" + "\t" + "selection coefficient" + "\t" + "freq\n" + file;
	if (!writeFile(paste(c(outfile,".mixture"),sep=""), file)) stop("Error writing file.");
	sim.simulationFinished();
}

function (integer)mutTypeFrequency(object<Subpopulation>$ subtype, o<MutationType>$ mutType)
{
	muts = sim.mutationsOfType(mutType);
	if (muts.size() > 0)
	{
		freqs = sim.mutationFrequencies(subtype, muts);
		indices = freqs > 0.001;
		return sum(indices);
		}
	return NULL;
}

function (integer)mutTypeFrequency2(object<Subpopulation>$ subtype, o<MutationType>$ mutType)
{
	muts = sim.mutationsOfType(mutType);
	if (muts.size() > 0)
	{
		freqs = sim.mutationFrequencies(subtype, muts);
		indices = freqs <= 0.001;
		return sum(indices);
		}
	return NULL;
}
